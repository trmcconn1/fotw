%{
  /* calendar.ff: specification for common conversions involving dates */

#include <stdio.h>
#include <stdlib.h>

double julian_day(double month, double day, double year);
int day_of_week( double jd );
double floor(double);
static char *day_names[] = {"Sunday","Monday","Tuesday","Wednesday",
				"Thursday","Friday","Saturday"};
static char *month_names[] = {"January","February","March","April",
			"May","June","July","August","September",
			"October","November","December"};
int i;
double jd;
%}
# default: /month/day/year format to  words format
-_ /\([0-9]+\)\/\([0-9]+\)\/\([0-9][0-9][0-9][0-9]\)/ {
jd = julian_day(
	atof(\$0),atof(\$1),atof(\$2)); i = day_of_week(jd); 
	printf("%s, %s %s, %s",day_names[i],month_names[atoi(\$0)-1],
	\$1,\$2); }
# If only two digits of year are given
-_ /\([0-9]+\)\/\([0-9]+\)\/\([0-9][0-9]\)/ {  jd = julian_day(
	atof(\$0),atof(\$1),atof(\$2)+1900); i = day_of_week(jd); 
	printf("%s, %s %s, 19%s",day_names[i],month_names[atoi(\$0)-1],
	\$1,\$2); }
# Separated by hyphens
-_ /\([0-9]+\)-\([0-9]+\)-\([0-9][0-9][0-9][0-9]\)/ {
jd = julian_day(
	atof(\$0),atof(\$1),atof(\$2)); i = day_of_week(jd); 
	printf("%s, %s %s, %s",day_names[i],month_names[atoi(\$0)-1],
	\$1,\$2); }
# If only two digits of year are given
-_ /\([0-9]+\)-\([0-9]+\)-\([0-9][0-9]\)/ {  jd = julian_day(
	atof(\$0),atof(\$1),atof(\$2)+1900); i = day_of_week(jd); 
	printf("%s, %s %s, 19%s",day_names[i],month_names[atoi(\$0)-1],
	\$1,\$2); }
# European: /day/month/year format to  words format
-european /\([0-9]+\)\/\([0-9]+\)\/\([0-9][0-9][0-9][0-9]\)/ {
jd = julian_day(
	atof(\$1),atof(\$0),atof(\$2)); i = day_of_week(jd); 
	printf("%s, %s %s, %s",day_names[i],month_names[atoi(\$1)-1],
	\$1,\$2); }
# If only two digits of year are given
-european /\([0-9]+\)\/\([0-9]+\)\/\([0-9][0-9]\)/ {  jd = julian_day(
	atof(\$1),atof(\$0),atof(\$2)+1900); i = day_of_week(jd); 
	printf("%s, %s %s, 19%s",day_names[i],month_names[atoi(\$1)-1],
	\$1,\$2); }
# Separated by hyphens
-european /\([0-9]+\)-\([0-9]+\)-\([0-9][0-9][0-9][0-9]\)/ {
jd = julian_day(
	atof(\$1),atof(\$0),atof(\$2)); i = day_of_week(jd); 
	printf("%s, %s %s, %s",day_names[i],month_names[atoi(\$1)-1],
	\$1,\$2); }
# If only two digits of year are given
-european /\([0-9]+\)-\([0-9]+\)-\([0-9][0-9]\)/ {  jd = julian_day(
	atof(\$1),atof(\$0),atof(\$2)+1900); i = day_of_week(jd); 
	printf("%s, %s %s, 19%s",day_names[i],month_names[atoi(\$1)-1],
	\$1,\$2); }
%%
double floor(double x)
{	
	int i;
	double r;
	i = (int) x;
	r = i;
	return r;
}

double julian_day(double month, double day, double year)
{
	/* from Meeus, Astronomical Formulae */
	double y,m,A,B;

	if(month > 2.0){
		y = year;
		m = month;
		}
	else {
		y = year -1;
		m = month + 12;
		}
	if(year + month/100 + day/10000 > 1582.1015){
		A = floor(y/100);
		B = 2 - A + floor(A/4);
		return floor(365.25*y)+floor(30.6001*(m+1))
			+ day + 1720994.5 + B;
		}
		else return floor(365.25*y)+floor(30.6001*(m+1))
			+ day + 1720994.5;
}
int day_of_week(double jd)
{
	return ((int) floor(jd)+2)%7;
}

