                                    Tableau 1.0 (ALPHA!!!)
				by Terry R. McConnell

Contents
--------
1. Introduction
2. Building the Package
3. Installation
4. Usage (Including Examples)
5. Disclaimer
6. Author

1. Introduction
---------------

	Tableau is a command line tool for analyzing sentences of 
propositional calculus. (Propositional calculus is the language of elementary
logic, including such expressions as A OR ( B AND ( C -> D ) )). It was
written as the author learned about the "method of tableaux", as presented
in the excellent text, Introduction to First Order Logic, by Raymond Smullyan. 

	The method of tableaux is a method for proving tautologies. It is
more efficient than the method of truth tables and, moreover, generalizes
in a useful way to first order logic. (At present we only handle propositional
calculus, not full first order logic. Perhaps some future version will
incorporate gamma and delta nodes. ) 

	An analytic tableau can be viewed as a formalized proof by contradiction
of a propositional calculus tautology. To get the idea, consider the
obvious tautology ( A and B ) -> ( A or B ). This can be proved to be 
a tautology with a 4 line truth table. Alternatively, suppose it could
be false ( we indicate this with a prefix, forming a "signed formula". )

F: ( A and B ) -> ( A or B )

But this can only happen if both T: A and B and F: A or B. In turn, 
each of these can happen only if both T: A and T: B, in the first case,
and F: A and F: B in the second. As these conclusions are clearly incompatible,
we have proved the original statement to be a tautology by contradiction.

This example is too special. A common situation is to encounter a signed
sentence like F: (A and B ) which entails an either/or conclusion: either F: A
or F: B. From this point onward the reasoning must split into two cases.
In general, the argument can branch into 2^k branches where k is the number
of subsentences like this one encountered. (In Smullyan's language, signed
connective expressions that cause branching are called beta nodes, and those
that do not are called alpha nodes.)

You already know enough about analytic tableaus to understand the output
from this program. Below is a tableau proof of the tautology
(p or (q and r) )->( (p or q) and (p or r) ) produced by the program. (There
+ stands for "or",  ^ stands for "and", and standard precedence assumptions
apply.)

	Analytic Tableau for F:(p+q^r)->(p+q)^(p+r)
	                    
1.f:(p+q^r)->(p+q)^(p+r)                     
2.t:(p+q^r)(1)                               
3.t:p(2)               |t:q^r(2)             
4.f:(p+q)^(p+r)(1)     |t:q(3)               
5.f:(p+q)(4)|f:(p+r)(4)|t:r(3)               
6.f:p(5)    |f:p(5)    |f:(p+q)^(p+r)(1)     
7.f:q(5)    |f:r(5)    |f:(p+q)(6)|f:(p+r)(6)
8.          |          |f:p(7)    |f:p(7)    
9.          |          |f:q(7)    |f:r(7)    
   X        | X        | X        | X        

The X's indicate that a line of reasoning includes a contradiction. Such
a tableau is said to be closed. Other tableaux may include branches marked
by O, which are said to be open branches. The numbers in parentheses tell
which line above entailed the given sentence.

2. Building the Package

Edit the Makefile and then say make all. If all goes well an executable
named tableau should be created. 

3. Installation

Make sure tableau is executable (chmod +x tableau if not) and move the
executable to some convenient directory on your command path.

4. Usage

	Assume the input file named foo contains the following lines:

# These are from Smullyan.
 ( p OR q AND r )  ->  ( p OR q ) AND ( p OR r ) 
 ( p -> ( q -> r ) ) -> ( ( p -> q ) -> ( p -> r ) )

To create truth tables for these wffs, give the command tableau -t foo.
The following output is printed to the screen: 

(p + q ^ r) -> (p + q) ^ (p + r)
 f f f f f  T   f f f  f  f f f 
 t t f f f  T   t t f  t  t t f 
 f f t f f  T   f t t  f  f f f 
 t t t f f  T   t t t  t  t t f 
 f f f f t  T   f f f  f  f t t 
 t t f f t  T   t t f  t  t t t 
 f t t t t  T   f t t  t  f t t 
 t t t t t  T   t t t  t  t t t 

(p -> (q -> r)) -> ((p -> q) -> (p -> r))
 f t   f t  f   T    f t  f  t   f t  f  
 t t   f t  f   T    t f  f  t   t f  f  
 f t   t f  f   T    f t  t  t   f t  f  
 t f   t f  f   T    t t  t  f   t f  f  
 f t   f t  t   T    f t  f  t   f t  t  
 t t   f t  t   T    t f  f  t   t t  t  
 f t   t t  t   T    f t  t  t   f t  t  
 t t   t t  t   T    t t  t  t   t t  t  

Note that each propositional variable is assigned all possible truth values
(t = true, f = false) with one line of the table corresponding to each
such assignment. Under each connective is listed the truth value that
results from the truth value(s) of each connected sub-sentence. The value
under the main connective, which also represents the truth value of the
overall sentence, is given in upper case. (These examples are both 
tautologies: every assignment makes the overall sentence true.) 

To create analytic tableaux for the same pair of sentences, give the
command tableau -a -s foo
(The -s option causes the two sentences to be treated separately.)

The following output results:

	Analytic Tableau for F:(p+q^r)->(p+q)^(p+r)
	                    
1.f:(p+q^r)->(p+q)^(p+r)                     
2.t:(p+q^r)(1)                               
3.t:p(2)               |t:q^r(2)             
4.f:(p+q)^(p+r)(1)     |t:q(3)               
5.f:(p+q)(4)|f:(p+r)(4)|t:r(3)               
6.f:p(5)    |f:p(5)    |f:(p+q)^(p+r)(1)     
7.f:q(5)    |f:r(5)    |f:(p+q)(6)|f:(p+r)(6)
8.          |          |f:p(7)    |f:p(7)    
9.          |          |f:q(7)    |f:r(7)    
   X        | X        | X        | X        

	Analytic Tableau for F:(p->(q->r))->((p->q)->(p->r))
	                    
1. f:(p->(q->r))->((p->q)->(p->r))                                        
2. t:(p->(q->r))(1)                                                       
3. f:p(2)                 |t:(q->r)(2)                                    
4. f:((p->q)->(p->r))(1)  |f:q(3)                 |t:r(3)                 
5. t:(p->q)(4)            |f:((p->q)->(p->r))(1)  |f:((p->q)->(p->r))(1)  
6. f:p(5)     |t:q(5)     |t:(p->q)(5)            |t:(p->q)(5)            
7. f:(p->r)(4)|f:(p->r)(4)|f:p(6)     |t:q(6)     |f:p(6)     |t:q(6)     
8. t:p(7)     |t:p(7)     |f:(p->r)(5)|f:(p->r)(5)|f:(p->r)(5)|f:(p->r)(5)
9. f:r(7)     |f:r(7)     |t:p(8)     |t:p(8)     |t:p(8)     |t:p(8)     
10.           |           |f:r(8)     |f:r(8)     |f:r(8)     |f:r(8)     
    X         | X         | X         | X         | X         | X         

Separate lines in the tableau are numbered, and each numbered line (except
the first) results from applying either an alpha or a beta rule to some
previous line. (The line that was used is given in parenthesis.) Beta
rules lead to branching. Separate branches are set off by |. Each formula
is preceded by its sign (t or f.) Closed branches are indicated at the
bottom with X, and open branches with O. Here, as expected, a tautology
with a false sign leads to a closed tableau.

5. Disclaimer
-------------

	This is free software, offered `as is' in the hope that others will
find it useful. The author cannot be held responsible for any damage to
equipment or software caused by this program.

6. Author
---------

Terry R. McConnell
2458 Swift Road
Lafayette, NY 13084
trmcconn@syr.edu
http://barnyard.syr.edu/~tmc
