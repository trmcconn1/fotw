# Problem 27 of ACP test. 
#
# Definition of trig functions. This uses a static image stored in file
# triangle.gif

# Boilerplate: every webwork problem starts with the following two macros 

DOCUMENT();


loadMacros(
	"PG.pl",
	"PGbasicmacros.pl",
	"PGanswermacros.pl",
	"PGchoicemacros.pl",
	"PGauxiliaryFunctions.pl"
);

TEXT(beginproblem(), $BR, $BBOLD, "Problem 27", $EBOLD, $BR);


# returns a permutation of 0-3 as a list. Used below to randomize
# multiple choice

sub myshuffle {

	my $a = random(0,3,1);
	my $b = ($a + random(1,3,1)) % 4;
	my $c = random(0,3,1);
	while (  $c == $a || $c == $b ) {
		 $c = random(0,3,1);
	}
	return ($a, $b, $c, 6 - $a - $b - $c);
}

# Returns a permutation of 0-4 as a list. Many problems on the second half
# of the ACP test have 5 choices.

sub mybigshuffle {

	my $a = random(0,3,1);
	my $b = ($a + random(1,3,1)) % 4;
	my $c = random(0,3,1);
	my $d = random(0,4,1);
	while (  $c == $a || $c == $b ) {
		 $c = random(0,3,1);
	}

	if( $d == 0 ){ return ( 4, $a,  $b, $c, 6 - $a - $b - $c); }
	if( $d == 1 ){ return ( $a, 4,  $b, $c, 6 - $a - $b - $c); }
	if( $d == 2 ){ return ( $a, $b, 4,  $c, 6 - $a - $b - $c); }
	if( $d == 3 ){ return ( $a, $b, $c, 4,  6 - $a - $b - $c); }
	if( $d == 4 ){ return ( $a, $b, $c, 6 - $a - $b - $c,  4); }

}


# Generate the numbers that will be used in the problem:
# We generate a random pythagorean triple. This is based on Theorem: if u and
# v are integers satisfying u > v > 0, (u,v) = 1 and 1 of u and v is even
# then c = u^2 + v^2, a = u^2 - v^2 and b = 2uv form a pythagorean triple
# with a, b, and c relatively prime in pairs.

$v = random(1,3,1);
$u = $v + 1;
$a = $u*$u - $v*$v;
$c = $u*$u + $v*$v;
$b = 2*$u*$v;
$ab = $a*$b;
$ca = $c*$a;


# compute correct and incorrect answers to display (correct is first one)

@ans = ("\frac{$c}{$b}","\frac{$b}{$c}","\frac{$a}{$b}","\frac{$c}{$ab}",
"\frac{$ca}{$b}");

# One can check these are all distinct by using the fact that a,b,c are
# pairwise relatively prime and each exceeds one. 

# get a permutation of 0-3 to shuffle display
@picks = mybigshuffle;
 
$ansA = $ans[$picks[0]]; 
$ansB = $ans[$picks[1]]; 
$ansC = $ans[$picks[2]]; 
$ansD = $ans[$picks[3]]; 
$ansE = $ans[$picks[4]]; 


# display problem

BEGIN_TEXT
Shown below is a right triangle:
($BBOLD Click on image for a larger view $EBOLD)
$PAR
\{ image("triangle.gif",'width'=>600, 'height'=>600) \}
$PAR
The side lengths of the triangle shown are \( a = $a, b = $b, c = $c. \) For
angle A in the picture   \( \sec(A) \) has the value:
$PAR
A) \( $ansA \)
$BR
B) \( $ansB \)
$BR
C) \( $ansC \)
$BR
D) \( $ansD \)
$BR
E) \( $ansE \)
$PAR
Enter your choice (A,B,C,D, or E.): \{ ans_rule(10) \}
$PAR
END_TEXT

# figure out which letter choice is correct

$letter = "A" if $picks[0] == 0;
$letter = "B" if $picks[1] == 0;
$letter = "C" if $picks[2] == 0;
$letter = "D" if $picks[3] == 0;
$letter = "E" if $picks[4] == 0;

ANS( str_cmp( $letter ) );

ENDDOCUMENT();
