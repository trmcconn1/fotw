; Internal.a: implementation of internal monitor commands.  The stack on
; entry to each command looks like so:
;
;    envp    32 bit pointer to array of string pointers
;    argv    32 bit pointer to array of string pointers
;    argc    32 bit integer
;    ret addr  <---- esp
;
;    each command returns 0 if everything ok, 1 if not, in eax

%include "macros.a"

SECTION .data
GLOBAL shift_name,shift_usage,shift_help,exit_name,exit_usage,exit_help,if_name
GLOBAL goto_name
if_name: db 'if',0
goto_name: db 'goto',0
shift_name: db 'shift',0
shift_usage: db 'shift [args ...]',10,0
shift_help: db 'run args as new command after processing',10,0
exit_name: db 'exit',0
exit_usage: db 'exit',10,0
exit_help: db 'immediately exit from program with return value 0',10,0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; set command                                                         ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


GLOBAL _set,set_name,set_usage,set_help
EXTERN my_strlen,newline,environment,my_strcpy,my_strncmp,mygetenv

set_name: db 'set',0
set_usage: db 'set [ FOO BAR ]',10,0
set_help: db 'set FOO=BAR, unset FOO if BAR absent, list env if no args',10,0
set_data: dd 1  ; memory to keep record of number of args
set_mode: dd 1  ; memory to keep record of mode of operation

SECTION .text

_set:

	push ebp       ; set up stack frame
	mov ebp,esp    ;

	push esi       ; store registers used on stack
	push edi
	push ebx
	push ecx
	push edx

	mov eax,[ebp+8]  ;  argc into eax
	cmp eax,3        ;  3 or more args is a usage error
	jae set_bad_ret
	cmp eax,0      ;  0 args: print listing of environment
	je set_zero_args;

	mov ebx, [ebp + 12]           ;save:  ebx has  argv
	mov [set_mode],eax            ;save:  value of argc

	; meaning of other values of argc:
        ; 1  set foo: remove setting for foo
        ; 2  set foo bar: copy foo=bar to data area

	cmp eax,1
	je set_one_arg                ; if only, one arg, skip copy of string

        ; stack up pointer to new env string - needed at end of 2 arg code  

	push DWORD [enddata]          ; it is in data area, at end

	; copy the new environment string, piece by piece, to the end
	; of the data area

	push DWORD [ebx]              ; pointer to string foo (*argv) 
	push DWORD [enddata]          ; where to copy to
	call my_strcpy                ; copy foo
	add esp,8
	dec eax                       ; point at null char at end of string
	add [enddata],eax             ; length of string copied in eax
	mov al,0x3D                   ; ascii code for =
	mov ebx,DWORD [enddata]
	mov BYTE [ebx],al
	inc DWORD [enddata]
	mov ebx, [ebp + 12]
	push DWORD [ebx + 4]         ; pointer to string bar
	push DWORD [enddata]
	call my_strcpy
	add esp,8
	add DWORD [enddata],eax   
		
set_one_arg:                         ; or two args - action here is the same

; search environment to see if foo= is already there

	push DWORD [ebx]  ; pointer to string foo
	call mygetenv     ; See if it is set in environment
	add esp,4         ; clean up from call
	cmp eax,0x00
	je set_search1_done    ; not found, skip remove_loop 
	
remove_loop:

	; remove the foo= string from the environment by moving all
	; pointers below it up by one 
        ; BUG: should we also null out the part of data area it points to
        ; for possible re-use ? Over time, crud will build up.

	mov eax, [environment+esi+4] ; next pointer below to eax
	mov [environment+esi],eax    ; and replace current pointer with it
	cmp ecx,0                    ; done when ecx = 0
	je set_done_shift            ; so continue on ...
	add esi,4                    ; else increment index,
	dec ecx                      ; decrement counter, and
	jmp remove_loop              ; restart move up pointers loop

set_done_shift:
	dec DWORD [envc]             ; count reduced when env string removed
	                             ; may be increased again below
	sub esi,4                    ; N.B.: esi has been increased one time
                                     ; too many 
set_search1_done:             

	mov eax,[set_mode]           ; remember mode of operation: two args
	cmp eax,2                    ; or one, and branch accordingly
	je set_two_args
	jmp  set_good_ret            ; all done if there was only 1 arg

set_two_args:                        ; else two args 

	pop ebx                      ; recall saved pointer to new string area
	mov [environment + esi], ebx ; and install it
	inc DWORD [envc]
	jmp set_good_ret 
	
; 0 args: print a listing of current environment

set_zero_args:
	mov esi,0     ; initialize counter

set_prenv:
	mov ecx,[environment + esi]   ; point ecx at first env string
	cmp ecx,0                     ; zero pointer marks end of env
	je set_good_ret               ; done with no problems
	push ecx                      ; push str ptr for strlen call 
	call my_strlen                  ; how many bytes to write
	pop ecx                       ; clean up from call
	PRINT_STRING ecx              ; print string with address in ecx
	PRINT_CHAR 0xA                ; move output to new line
	add esi,4                     ; increase counter 
	jmp set_prenv                 ; restart print env loop

set_good_ret:
	mov eax,0                     ; good return value
	jmp set_ret

set_bad_ret:

	PRINT_STRING set_usage        ; usage error message
	PRINT_CHAR 0xA	
	mov eax,1                     ; bad return value
	
set_ret:

	pop edx                       ; restore registers used
	pop ecx
	pop ebx
	pop edi
	pop esi
	pop ebp
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; read command                                                        ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION .data
GLOBAL _read,read_name,read_usage,read_help
EXTERN linebuf1

read_name: db 'read',0
read_usage: db 'read var',10,0
read_help: db 'Prompt user for input and store response in env var',10,0
read_prompt: db 'Enter your response: ',0
read_setargs: times 2 dd 0      ; char **argv for set call

SECTION .text

_read:

	push ebp                    ; set up stack frame
	mov ebp,esp

	PRINT_STRING read_prompt    ; present user with prompt for input 
	READ_LINE linebuf1          ; read her response into buffer

; The response buffer has a newline that we have to get rid of

	mov BYTE [linebuf1 + eax - 1], 0x00 ; kill the newline 
	
	mov eax, [ebp + 8]          ; pointer to name of env var passed in
	mov [read_setargs],eax 
	mov eax, linebuf1           ; pointer to value of env var
	mov [read_setargs+4],eax    ; finish building argv for set
	push read_setargs           ; push char **argv for set
	push DWORD 2                ; push argc (=2) for set call 
	call _set                   ; set var = response
	add esp,8                   ; clean up from set call
	pop ebp                     ; restore registers used
	ret 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; help command                                                        ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION .data

GLOBAL _help,help_name,help_usage,help_help
EXTERN my_strcmp,my_strstr,n_externals,external_names,external_usage,external_help

help_name: db 'help',0
help_usage: db 'help [ command ]',10,0
help_help: db 'print cmd list or help for command',10,0
help_msg0: db `Available commands are:\n\n`,0
help_ptr: dd 0
equalpound: db 0x3D,COMMENT_CHAR,0  ; the sequence =# that identifies scripts

SECTION .text

_help:

	push ebp       ; set up stack frame
	mov ebp,esp    ;

	push esi       ; store registers used on stack
	push ebx
	push ecx
	push edx

	mov eax,[ebp+8] ;  argc into eax
	cmp eax,2      ;  2 or more args is a usage error
	jae help_bad_ret
	cmp eax,0      ;   
	je help_no_args

; 1 arg: print detailed help for command
	
	mov ebx, [ebp + 12]   ; argv in ebx
	push DWORD [ebx]      ; push *argv

	push set_name
	call my_strcmp
	add esp,4
	cmp eax,0
	jne is_it_shift
	PRINT_STRING set_usage
	PRINT_STRING set_help
	jmp help_cleanup

is_it_shift:

	push shift_name
	call my_strcmp
	add esp,4
	cmp eax,0
	jne is_it_read
	PRINT_STRING shift_usage
	PRINT_STRING shift_help
	jmp help_cleanup

is_it_read:

	push read_name
	call my_strcmp
	add esp,4
	cmp eax,0
	jne is_it_help
	PRINT_STRING read_usage
	PRINT_STRING read_help
	jmp help_cleanup

is_it_help:

	push help_name
	call my_strcmp
	add esp,4
	cmp eax,0
	jne is_it_echo
	PRINT_STRING help_usage
	PRINT_STRING help_help
	jmp help_cleanup

is_it_echo:

	push echo_name
	call my_strcmp
	add esp,4
	cmp eax,0
	jne is_it_status
	PRINT_STRING echo_usage
	PRINT_STRING echo_help
	jmp help_cleanup

is_it_status:

	push status_name
	call my_strcmp
	add esp,4
	cmp eax,0
	jne is_it_exit
	PRINT_STRING status_usage
	PRINT_STRING status_help
	jmp help_cleanup

is_it_exit:

	push exit_name
	call my_strcmp
	add esp,4
	cmp eax,0
	jne is_it_external
	PRINT_STRING exit_usage
	PRINT_STRING exit_help
	jmp help_cleanup

is_it_external:
	
	mov ecx,[n_externals] 
	xor esi,esi

help_external_search:

	cmp ecx,0
	jbe is_it_a_script
	push DWORD [external_names + esi]
	call my_strcmp
	add esp,4
	cmp eax,0 
	je help_found_external
	add esi,4
	dec ecx
 	jmp help_external_search

help_found_external:

	PRINT_STRING [external_usage + esi]
	PRINT_STRING [external_help + esi]
	jmp help_cleanup

is_it_a_script:

	call mygetenv
	cmp eax,0x00
	je help_not_found
	mov [help_ptr],eax
	PRINT_STRING [help_ptr]
	jmp help_cleanup
	
	; clean stack and print all commands since this arg not found

help_not_found:
	add esp,4
	jmp help_no_args

help_cleanup:
	add esp,4      ; pop pushed arg
	jmp help_good_ret

help_no_args:

; 0 args: print a listing of commands

	PRINT_STRING  help_msg0
	PRINT_STRING  set_name
	PRINT_CHAR 0xA	
	PRINT_STRING  help_name
	PRINT_CHAR 0xA
	PRINT_STRING  echo_name
	PRINT_CHAR 0xA	
	PRINT_STRING  status_name
	PRINT_CHAR 0xA	
	PRINT_STRING  shift_name
	PRINT_CHAR 0xA	
	PRINT_STRING exit_name
	PRINT_CHAR 0xA	
	PRINT_STRING read_name
	PRINT_CHAR 0xA	

; loop over external commands, printing their names as well

	mov ecx,[n_externals]
	xor esi,esi

help_list_externals:

	cmp ecx,0
	je help_list_scripts
	PRINT_STRING [external_names + esi]	
	PRINT_CHAR 0xA	
	add esi,4
	dec ecx
	cmp ecx,0
	jmp help_list_externals

; loop over all scripts. We believe a script is the value of any environment
; variable that starts with #

help_list_scripts:

	mov ecx,[envc]    ; loop over all env variables
	xor esi,esi       ; initialize env pointer offset

help_list_scripts_loop:

	cmp ecx,0         ; if no env variable remain to be examined
	je help_good_ret  ; then begin the return process
	mov eax,[environment + esi]  ; else store address of current env string
	mov [help_ptr],eax           ; in a local holding area 
	push equalpound  ; determine whether the =# sequence occurs inside
	push DWORD [help_ptr] ; current env string. If so, we deem it the start
	call my_strstr    ; of a script. (BUG: it might not be.)
	add esp,8         ; clean up from call
	cmp eax,0x00      ; if strstr returned null then this var not a script
	je scripts_loop_continue ; so go on to the next env var
; else print out the name part of the current env var as the name of a script
	mov BYTE [eax], 0x00 ; termporarily null terminate the name part of var
	push eax          ; save address of null byte for later restore
	PRINT_STRING [help_ptr]
	PRINT_CHAR 0xA    ; print a new line
	pop eax           ; restored saved address of byte where = removed
	mov BYTE [eax],0x3D  ; put = sign back in env string

scripts_loop_continue:
	
	dec ecx
	add esi,4
	jmp help_list_scripts_loop

help_good_ret:
	mov eax,0                     ; good return value
	jmp help_ret

help_bad_ret:
	PRINT_STRING help_usage        ; usage error message
	PRINT_CHAR 0xA	
	mov eax,1                     ; bad return value
	
help_ret:

	pop edx                       ; restore registers used
	pop ecx
	pop ebx
	pop esi
	pop ebp
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; echo command                                                        ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION .data

GLOBAL _echo,echo_name,echo_usage,echo_help

echo_name: db 'echo',0
echo_usage: db 'echo [ anything ]',10,0
echo_help: db 'print tail of command line',10,0
echo_arg: dd 0

SECTION .text

_echo:

	push ebp       ; set up stack frame
	mov ebp,esp    ;
	push esi       ; save registers used
	push ebx
	push ecx


;  print everthing that second arg points to 

	mov ecx,[ebp + 8] ; load argc in ecx = number of words to echo
	mov ebx,[ebp + 12]; load argv in ebx
	xor esi,esi       ; initialize index to args

echo_print_loop:
	cmp ecx,0x00      ; Any more args to echo ?
	je  echo_ret      ; No, finish up and return
	mov eax,[ebx+esi]
	mov [echo_arg],eax
	PRINT_STRING [echo_arg] ; print the arg
	PRINT_CHAR 0x20
	add esi,4         ; point at next arg
	dec ecx           ; decrement counter
	jmp echo_print_loop

echo_ret:

	PRINT_CHAR 0xA	
	mov eax,0                     ; good return value
	pop ecx                       ; restore registers used
	pop ebx
	pop esi
	pop ebp
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; status command                                                       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION .data

GLOBAL _status,status_name,status_usage,status_help
EXTERN _print_i,envc,enddata,data

status_name: db 'status',0
status_usage: db 'status',10,0
status_help: db 'Print data on current program state',10,0
status_str0: db 10,'Break address =  ',0
status_str2: db 10,'Number of Environment Strings = ',0 
status_str3: db 10,'Dynamic Memory Used (bytes) = ',0

SECTION .text

_status: 

; The break address is the top of memory available to the program for
; dynamic memory allocation. We put all new environment strings in this
; area. Since we never bother to reclaim any of this memory it will get
; used up over time. Obtaining the break address is OS dependent
; and we implement it in SBRK in macros.a

	PRINT_STRING status_str0             	
	SBRK                       ; return break address in eax
	push eax
	call _print_i              ; print break address to screen
	pop eax                    ; clean up from call 
	PRINT_STRING status_str2
	mov eax, [envc]            ; number of environment strings
	push eax
	call _print_i              ; print it and
	pop eax                    ; and clean up from call
	PRINT_STRING status_str3
	mov eax, [enddata]         ; end of data we have written to data
	sub eax,data               ; subtract from start of data area
	push eax                   ; and print the difference = bytes
	call _print_i              ; of dynamic memory used
	pop eax                    ; clean up from call
	ret
	
